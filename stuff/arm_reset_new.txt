==== Console Interface for feature_constraint_controller ===

command line script 'state' in feature_constraints
or feature_constraint_controller.

  * state get : print the current values of chi, chi_des, joint_angles, tool_pose and object_pose in the form: <code>
chi:
1.1 2.2 -4.44 ...
joints:
1 2 3
...
</code>

  * ''state set angles //angles//''
  * ''state set chi //chi-angles//''
  * ''state set chi -'' : (repeatedly) get values from stdin

The semantics of ''//chi-angles//'' is as follows: A numeric values translates
into a small range around this value, a string becomes 'not important' and sets
the respective weight to zero. The command ''state set angles'' only accepts
numeric values.

---

Slightly different approach: A rosparam interface.
  * state get yaml >file.xml : ouputs the yaml in a format that can be loaded with rosparam load.
  * ''state get param ///param_name//'' : directly saves the state into /param_name
  * ''state set chi ///param_name/chi//''
  * ...

Nothing speaks against supporting both interfaces.

Why not:
  * ''state set _chi:=///param_name/chi//'' ?

This would be too error-prone to use since the value of /state/chi (which is only a name) would stay on the param server and would influence the next call to ''state''. Contrary to ROS conventions, ''state'' would have to delete this parameter after reading it.

---
For usability reasons, the following command //should// use the parameter
server:

  * ''state reset'' : sets the arm angles to default values, stored on the parameter server.

In theory, this command could be unified with ''state set angles'', maybe
''state set angles init''? But then again, ''state reset'' is much shorter.

**TODO**:
  * define standard name for this param (proposal: /robot_initial_joints)
  * define standard names for topics so command line tools have a chance to be useful. Proposal:
    * ''~constraint_config''
    * ''~constraint_command''
    * ''~constraint_state''
    * have a prefix parameter for the ''state'' command, which defaults to ''/constraint_controller''.
    * Joint angles and poses are taken from ''/tf'' and ''/joint_states''.
  * (Future): What shall we do if two arms and/or several constraint sets are active in the same controller? Give names to arms and constraint sets and use them with every invocation of ''state''? Have a rosparam, that holds the default name, for convenience?

For the situation with several constraint_controllers, the prefix for the
controller name (and thus the topic names) would do. Joint angle names could
be recovered from the URDF using the package 'urdf_parser_py', using the name
of the first and last joint which in turn is taken from the
constraint_controller parameters.

